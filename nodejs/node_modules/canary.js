var AWS = require("aws-sdk");
const lambda = new AWS.Lambda({region: 'us-east-2'});
const synthetics = require('Synthetics');
const syntheticsConfiguration = synthetics.getConfiguration();
const log = require('SyntheticsLogger');

function getHealthcheck() {
    lambda.invoke({
        FunctionName: 'get-healthcheck', 
        InvocationType: 'RequestResponse', 
        LogType: 'Tail' 
    }, function(err, data) {
        log.info("The golang-λ `get-healthcheck` invocation has been started.");
        if (err) log.info(err, err.stack);
        else {
            log.info("lambda triggered.")
            const payload = JSON.parse(data.Payload);
            if (payload.statusCode === 200) {
                log.info("Success: Operation was successful\nbody: " + payload.body + "\nstatusCode: " + payload.statusCode)
            }
        }
    });
};

function postMessages() {
    lambda.invoke({
        FunctionName: 'post-messages', 
        InvocationType: 'RequestResponse', 
        LogType: 'Tail' 
    }, function(err, data) {
        log.info("The golang-λ `post-messages` invocation has been started.");
        if (err) log.info(err, err.stack);
        else {
            log.info("lambda triggered.")
            const payload = JSON.parse(data.Payload);
            if (payload.statusCode === 401) {
                log.error("Error: Auth cookie is not present or invalid\nbody: " + payload.body + "\nstatusCode: " + payload.statusCode)
            }
            if (payload.statusCode === 200) {
                log.info("Success: OK\nbody: " + payload.body + "\nstatusCode: " + payload.statusCode)
            }
        }
    });
};

const mainHandler = function (event, context, callback) {
    syntheticsConfiguration.setConfig({
       continueOnStepFailure: true,
       includeRequestHeaders: true, // Enable if headers should be displayed in HAR
       includeResponseHeaders: true, // Enable if headers should be displayed in HAR
       includeRequestBody: true,
       includeResponseBody: true,
       restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
       restrictedUrlParameters: [] // Values of these url parameters will be redacted from logs and reports
    });

    getHealthcheck();

    postMessages();

    return "The canary-λ invocation has been successfully completed."
};

exports.handler = function(event, context, callback) {
    return mainHandler(event, context, callback);
};